{"version":3,"file":"MinecraftEventDrivenForm.js","sources":["../src/Errors.ts","../src/Arguments.ts","../src/Event.ts","../src/Translate.ts"],"sourcesContent":["export class FormError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n\nexport class FormArgumentError extends FormError {\n  constructor(\n    readonly path: string,\n    readonly step: string,\n    readonly current: unknown\n  ) {\n    super(`Invalid path: ${path} at step: ${step} in object: ${JSON.stringify(current)}`);\n  }\n}\n","import { FormArgumentError } from './Errors';\nimport { NormalizedTextContent, TextContent } from './Primitives';\n\ninterface ToString {\n  toString(): string;\n}\n\ntype StringResolvableMap = {\n  [key: string]: StringResolvable;\n};\n\nexport type StringResolvable = ToString | StringResolvableMap;\n\nexport class FormArguments {\n  private _args: Record<string, StringResolvable> = {};\n  set(name: string, arg: StringResolvable) {\n    this._args[name] = arg;\n  }\n\n  setAll(args: Record<string, StringResolvable>) {\n    this._args = {\n      ...this._args,\n      ...args,\n    };\n  }\n\n  getAll() {\n    return this._args;\n  }\n\n  get<Arg extends StringResolvable>(name: string): Arg {\n    return this._args[name] as Arg;\n  }\n\n  resolvePath(path: string): string {\n    let current: StringResolvable = this._args;\n    const splitPath = path.split('.');\n    for (const step of splitPath) {\n      if (typeof current === 'object' && step in current) {\n        current = (current as StringResolvableMap)[step];\n      } else {\n        throw new FormArgumentError(path, step, current);\n      }\n    }\n\n    return current.toString();\n  }\n\n  resolveTemplate(template: string) {\n    return template.replace(/\\{\\s*([^}\\s]+)\\s*\\}/g, (_, p1) => {\n      return this.resolvePath(p1);\n    });\n  }\n\n  normalize(content: TextContent): NormalizedTextContent {\n    if (typeof content === 'string') {\n      return {\n        type: 'text',\n        text: this.resolveTemplate(content),\n      };\n    } else if (Array.isArray(content)) {\n      return {\n        type: 'array',\n        array: content.map((c) => this.normalize(c)),\n      };\n    } else {\n      return {\n        type: 'translate',\n        translate: this.resolveTemplate(content.translate),\n        args: content.args ? content.args.map((a) => this.normalize(a)) : undefined,\n      };\n    }\n  }\n}\n","import { FormError } from './Errors';\nimport { FormHub } from './Hub';\nimport { Form } from './form';\nimport { InputForm } from './form/Input';\nimport { MultiButtonForm } from './form/MultiButton';\nimport { FormArguments } from './Arguments';\nimport { FormAction } from './Primitives';\n\nexport class FormEvent {\n  protected _form: Form | undefined = undefined;\n  protected _name: string | undefined = undefined;\n  protected _continueProcessing: boolean = true;\n  protected readonly _hub: FormHub;\n  protected _args: FormArguments = new FormArguments();\n  protected _eventArgs: Array<unknown> = [];\n\n  constructor(hub: FormHub, action?: FormAction, previousArgs?: FormArguments) {\n    this._hub = hub;\n\n    if (action) {\n      if (action.event) {\n        this._name = action.event;\n      }\n\n      if (action.form) {\n        this._form = this._hub.forms[action.form];\n      }\n\n      if (action.copyArgs && previousArgs) {\n        this._args.setAll(previousArgs.getAll());\n      }\n\n      if (action.eventArgs) {\n        this._eventArgs = action.eventArgs;\n      }\n    }\n  }\n\n  loadForm(name: string): Form;\n  loadForm(name: string, type: 'multi-button'): MultiButtonForm;\n  loadForm(name: string, type: 'input'): InputForm;\n  loadForm(name: string, type: 'dual-button'): InputForm;\n\n  loadForm(name: string, type?: 'multi-button' | 'input' | 'dual-button'): Form {\n    if (name in this._hub.forms) {\n      const form = this._hub.forms[name];\n      if (type && form.type !== type) {\n        throw new FormError(`Invalid type ${type} for form named ${name}. The actual type is ${form.type}`);\n      }\n\n      return JSON.parse(JSON.stringify(form));\n    }\n\n    throw new FormError(`Unknown form named ${name}`);\n  }\n\n  set form(form) {\n    this._form = form;\n  }\n\n  get form() {\n    return this._form;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get args() {\n    return this._args;\n  }\n\n  get eventArgs() {\n    return this._eventArgs;\n  }\n\n  get continueProcessing() {\n    return this._continueProcessing;\n  }\n\n  cancelProcessing() {\n    this._continueProcessing = false;\n  }\n}\n\ntype EventReceiverFunction = (event: FormEvent) => Promise<void>;\ntype EventReceiverMap = Record<string, EventReceiverFunction>;\nexport type EventReceiver = EventReceiverFunction | EventReceiverMap | undefined;\n\nexport const triggerEvent = async (event: FormEvent, receiver: EventReceiver): Promise<Form | undefined> => {\n  if (event.name) {\n    if (receiver === undefined) {\n      return;\n    } else if (typeof receiver === 'function') {\n      await receiver(event);\n    } else {\n      for (const [key, eventReceiver] of Object.entries(receiver)) {\n        if (!event.continueProcessing) {\n          break;\n        }\n\n        if (key === event.name) {\n          await eventReceiver(event);\n        }\n      }\n    }\n  }\n\n  return event.form;\n};\n","import { Translate } from './Primitives';\n\nexport const _ = (value: string): Translate => ({\n  translate: value,\n});\n"],"names":[],"mappings":"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"}